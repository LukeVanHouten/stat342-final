# Chunk 1: setup
#Use this code chunk to include libraries, and set global options.
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(maxLik)
library(reshape2)
library(fastR2)
# Chunk 2
loglik <- function(psi, T, n){
if (psi > 1 | psi < 0)
return(NA)
else
return(log(choose(n, T)) + (T * log(1 - psi)) - (n * log(2 - psi)))
}
estimation <- maxLik2(loglik = loglik, start = 0.55, method = "NR", tol = 1e-4,
T = 8, n = 170)
print(estimation)
# Chunk 3
W = (2 * 8 * log(1 - (77 / 81))) - (2 * 170 * log(2 - (77 / 81))) -
(2 * 8 * log(1 - 0.95)) + (2 * 170 * log(2 - 0.95))
p_value <- round(pchisq(q = W, df = 1, lower.tail=F), 4)
# Chunk 1: setup
#Use this code chunk to include libraries, and set global options.
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(maxLik)
library(reshape2)
library(fastR2)
# Chunk 2
loglik <- function(psi, T, n){
if (psi > 1 | psi < 0)
return(NA)
else
return(log(choose(n, T)) + (T * log(1 - psi)) - (n * log(2 - psi)))
}
estimation <- maxLik2(loglik = loglik, start = 0.55, method = "NR", tol = 1e-4,
T = 8, n = 170)
print(estimation)
# Chunk 3
W = (2 * 8 * log(1 - (77 / 81))) - (2 * 170 * log(2 - (77 / 81))) -
(2 * 8 * log(1 - 0.95)) + (2 * 170 * log(2 - 0.95))
p_value <- round(pchisq(q = W, df = 1, lower.tail=F), 4)
data <- read.csv("data.csv")
vaccine <- data %>%
filter(Test == "Vaccine")
placebo <- data %>%
filter(Test == "Placebo")
n_vaccine <- vaccine$COVID + vaccine$No_COVID
n_placebo <- placebo$COVID + placebo$No_COVID
prop_vaccine <- vaccine$COVID[1] / n_vaccine
prop_placebo <- placebo$COVID[1] / n_placebo
observed_pi <- prop_vaccine/(prop_vaccine + prop_placebo)
observed_psi <- (1 - 2*observed_pi)/(1 - observed_pi)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
pivot_data <- data %>%
pivot_longer(cols = c(COVID, No_COVID), names_to = "Tests", values_to = "Count")
summary <- pivot_data %>%
group_by(Test) %>%
summarise(min = min(Count), lower = quantile(Count, 0.25),
median = median(Count), upper = quantile(Count, 0.75),
max = max(Count))
ggplot(pivot_data, aes(x = Test, y = Count, fill = Test)) +
geom_boxplot() +
geom_text(data = summary, aes(x = Test, y = median, label = paste("Median:", median)),
vjust = -0.5, color = "black") +
geom_text(data = summary, aes(x = Test, y = lower, label = paste("Q1:", lower)),
vjust = 1.5, hjust = -0.3, color = "black") +
geom_text(data = summary, aes(x = Test, y = upper, label = paste("Q3:", upper)),
vjust = -1, hjust = -0.3, color = "black") +
geom_text(data = summary, aes(x = Test, y = min, label = paste("Min:", min)),
vjust = 1.5, color = "black") +
geom_text(data = summary, aes(x = Test, y = max, label = paste("Max:", max)),
vjust = -1.5, color = "black") +
labs(title = "Positive and Negative COVID Test Counts by Test Group",
x = "Test Group", y = "Number of Tests")
source("C:/Users/lukev/Desktop/Luke Files/School/2023-2024/Spring/STAT 342/stat342-final/Other Visualizations.R", echo=TRUE)
pivot_data <- data %>%
pivot_longer(cols = c(COVID, No_COVID), names_to = "Tests", values_to = "Count")
summary <- pivot_data %>%
group_by(Test) %>%
summarise(min = min(Count), lower = quantile(Count, 0.25),
median = median(Count), upper = quantile(Count, 0.75),
max = max(Count))
ggplot(pivot_data, aes(x = Test, y = Count, fill = Test)) +
geom_boxplot() +
geom_text(data = summary, aes(x = Test, y = median,
label = paste("Median:", median)),
vjust = -0.5) +
geom_text(data = summary, aes(x = Test, y = lower,
label = paste("Q1:", lower)),
vjust = 1.5, hjust = -0.3) +
geom_text(data = summary, aes(x = Test, y = upper,
label = paste("Q3:", upper)),
vjust = -1, hjust = -0.3) +
geom_text(data = summary, aes(x = Test, y = min,
label = paste("Min:", min)),
vjust = 1.3) +
geom_text(data = summary, aes(x = Test, y = max,
label = paste("Max:", max)),
vjust = -1.1) +
labs(title = "Positive and Negative COVID Test Counts by Test Group",
x = "Test Group", y = "Number of Tests")
pivot_data <- data %>%
pivot_longer(cols = c(COVID, No_COVID), names_to = "Tests", values_to = "Count")
summary <- pivot_data %>%
group_by(Test) %>%
summarise(min = min(Count), lower = quantile(Count, 0.25),
median = median(Count), upper = quantile(Count, 0.75),
max = max(Count))
ggplot(pivot_data, aes(x = Test, y = Count, fill = Test)) +
geom_boxplot() +
geom_text(data = summary, aes(x = Test, y = median,
label = paste("Median:", median)),
vjust = -0.5) +
geom_text(data = summary, aes(x = Test, y = lower,
label = paste("Q1:", lower)),
vjust = 1.5, hjust = -0.3) +
geom_text(data = summary, aes(x = Test, y = upper,
label = paste("Q3:", upper)),
vjust = -1, hjust = -0.3) +
geom_text(data = summary, aes(x = Test, y = min,
label = paste("Min:", min)),
vjust = 1.3) +
geom_text(data = summary, aes(x = Test, y = max,
label = paste("Max:", max)),
vjust = -1) +
labs(title = "Positive and Negative COVID Test Counts by Test Group",
x = "Test Group", y = "Number of Tests")
pivot_data <- data %>%
pivot_longer(cols = c(COVID, No_COVID), names_to = "Tests", values_to = "Count")
# Chunk 1: setup
#Use this code chunk to include libraries, and set global options.
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(maxLik)
library(reshape2)
library(fastR2)
# Chunk 2
loglik <- function(psi, T, n){
if (psi > 1 | psi < 0)
return(NA)
else
return(log(choose(n, T)) + (T * log(1 - psi)) - (n * log(2 - psi)))
}
estimation <- maxLik2(loglik = loglik, start = 0.55, method = "NR", tol = 1e-4,
T = 8, n = 170)
print(estimation)
# Chunk 3
W = (2 * 8 * log(1 - (77 / 81))) - (2 * 170 * log(2 - (77 / 81))) -
(2 * 8 * log(1 - 0.95)) + (2 * 170 * log(2 - 0.95))
p_value <- round(pchisq(q = W, df = 1, lower.tail=F), 4)
# Chunk 4
data <- read.csv("data.csv")
vaccine <- data %>%
filter(Test == "Vaccine")
placebo <- data %>%
filter(Test == "Placebo")
n_vaccine <- vaccine$COVID + vaccine$No_COVID
n_placebo <- placebo$COVID + placebo$No_COVID
prop_vaccine <- vaccine$COVID[1] / n_vaccine
prop_placebo <- placebo$COVID[1] / n_placebo
observed_pi <- prop_vaccine/(prop_vaccine + prop_placebo)
observed_psi <- (1 - 2*observed_pi)/(1 - observed_pi)
# Chunk 5
n_bootstrap <- 10000
bootstrap_psis <- numeric(n_bootstrap)
set.seed(123)
for (i in 1:n_bootstrap) {
vaccine_sample <- sample(c(0, 1), size = n_vaccine, replace = TRUE,
prob = c(1 - prop_vaccine, prop_vaccine))
placebo_sample <- sample(c(0, 1), size = n_placebo, replace = TRUE,
prob = c(1 - prop_placebo, prop_placebo))
prop_vaccine_boot <- mean(vaccine_sample)
prop_placebo_boot <- mean(placebo_sample)
bootstrap_pi <- prop_vaccine_boot / (prop_vaccine_boot + prop_placebo_boot)
bootstrap_psis[i] <- (1 - 2 * bootstrap_pi) / (1 - bootstrap_pi)
}
# Chunk 6
bootstrap_df <- data.frame(psi = bootstrap_psis)
ggplot(bootstrap_df, aes(x = psi)) +
geom_histogram(binwidth = 0.007, fill = "darkorchid1", color = "black") +
labs(title = "Histogram of Bootstrap Psi Values", x = "Psi", y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 7
overall_ci <- quantile(bootstrap_psis, c(0.025, 0.975))
ci_data <- data.frame(
Iteration = 1:n_bootstrap,
Lower = numeric(n_bootstrap),
Upper = numeric(n_bootstrap)
)
for (i in 1:n_bootstrap) {
sample_psis <- sample(bootstrap_psis, n_bootstrap, replace = TRUE)
ci_data$Lower[i] <- quantile(sample_psis, 0.025)
ci_data$Upper[i] <- quantile(sample_psis, 0.975)
}
bootstrap_df <- data.frame(psi = bootstrap_psis)
ggplot(bootstrap_df, aes(x = psi)) +
geom_histogram(binwidth = 0.007, fill = "darkorchid1", color = "black") +
labs(title = "Histogram of Bootstrap Psi Values", x = "Psi", y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
data <- read.csv("data.csv")
vaccine <- data %>%
filter(Test == "Vaccine")
placebo <- data %>%
filter(Test == "Placebo")
n_vaccine <- vaccine$COVID + vaccine$No_COVID
n_placebo <- placebo$COVID + placebo$No_COVID
prop_vaccine <- vaccine$COVID[1] / n_vaccine
prop_placebo <- placebo$COVID[1] / n_placebo
observed_pi <- prop_vaccine/(prop_vaccine + prop_placebo)
observed_psi <- (1 - 2*observed_pi)/(1 - observed_pi)
pivot_data <- data %>%
pivot_longer(cols = c(COVID, No_COVID), names_to = "Tests", values_to = "Count")
summary <- pivot_data %>%
group_by(Test) %>%
summarise(min = min(Count), lower = quantile(Count, 0.25),
median = median(Count), upper = quantile(Count, 0.75),
max = max(Count))
ggplot(pivot_data, aes(x = Test, y = Count, fill = Test)) +
geom_boxplot() +
geom_text(data = summary, aes(x = Test, y = median,
label = paste("Median:", median)),
vjust = -0.5) +
geom_text(data = summary, aes(x = Test, y = lower,
label = paste("Q1:", lower)),
vjust = 1.5, hjust = -0.3) +
geom_text(data = summary, aes(x = Test, y = upper,
label = paste("Q3:", upper)),
vjust = -1, hjust = -0.3) +
geom_text(data = summary, aes(x = Test, y = min,
label = paste("Min:", min)),
vjust = 1.3) +
geom_text(data = summary, aes(x = Test, y = max,
label = paste("Max:", max)),
vjust = -0.5) +
labs(title = "Positive and Negative COVID Test Counts by Test Group",
x = "Test Group", y = "Number of Tests")
data <- read.csv("data.csv")
W = (2 * 8 * log(1 - (77 / 81))) - (2 * 170 * log(2 - (77 / 81))) -
(2 * 8 * log(1 - 0.3)) + (2 * 170 * log(2 - 0.3))
p_value <- round(pchisq(q = W, df = 1, lower.tail=F), 4)
W = (2 * 8 * log(1 - (77 / 81))) - (2 * 170 * log(2 - (77 / 81))) -
(2 * 8 * log(1 - 0.3)) + (2 * 170 * log(2 - 0.3))
p_value <- pchisq(q = W, df = 1, lower.tail=F)
round(W, 4)
100 * (77 / 81)
round(100 * (77 / 81), 2)
sample(c(0, 1), size = vaccine$n, replace = TRUE, prob = c(1 - prop_vaccine, prop_vaccine))
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(maxLik)
library(reshape2)
library(fastR2)
library(boot)
library(readr)
# Chunk 1: setup
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(maxLik)
library(reshape2)
library(fastR2)
library(boot)
library(readr)
# Chunk 2: read data
data <- read.csv("data.csv")
data_melted <- melt(data, id.vars = "Test")
# Chunk 3: stacked barplot
ggplot(data_melted, aes(x = Test, y = value, fill = variable)) +
geom_bar(stat = "identity") +
geom_text(aes(label = value),
position = position_stack(vjust = 0.5)) +
labs(x = "Test", y = "Number of Participants",
title = "COVID Infection for Vaccine and Placebo Groups")
# Chunk 4: newton rhapson
loglik <- function(psi, T, n){
if (psi > 1 | psi < 0)
return(NA)
else
return(log(choose(n, T)) + (T * log(1 - psi)) - (n * log(2 - psi)))
}
estimation <- maxLik2(loglik = loglik, start = 0.55, method = "NR", tol = 1e-4,
T = 8, n = 170)
print(estimation)
plot(estimation) +
labs(title = "Second order approximation to the Log-Likelihood Function",
x = expression(psi))
# Chunk 5: likelihood ratio test
W = (2 * 8 * log(1 - (77 / 81))) - (2 * 170 * log(2 - (77 / 81))) -
(2 * 8 * log(1 - 0.3)) + (2 * 170 * log(2 - 0.3))
p_value <- pchisq(q = W, df = 1, lower.tail=F)
# Chunk 6: mle confidence inteval
se <- sqrt(-1 / ((170 / (2 - 0.9506)^2) - (8 / (1 - 0.9506)^2)))
upper_lim <- 0.9506 + 1.96 * se
lower_lim <- 0.9506 - 1.96 * se
# Chunk 7
vaccine <- data %>%
filter(Test == "Vaccine")
placebo <- data %>%
filter(Test == "Placebo")
prop_vaccine <- vaccine$COVID / vaccine$n
prop_placebo <- placebo$COVID / placebo$n
observed_pi <- prop_vaccine/(prop_vaccine + prop_placebo)
observed_psi <- (1 - 2*observed_pi)/(1 - observed_pi)
sample(c(0, 1), size = vaccine$n, replace = TRUE, prob = c(1 - prop_vaccine, prop_vaccine))
vaccine$n
vaccine
Vaccine$Covid + vaccine$No_Covid
vaccine$Covid + vaccine$No_Covid
vaccine$Covid
vaccine$COVID
vaccine$COVID + vaccine$No_COVID
n_bootstrap <- 10000
bootstrap_psis <- numeric(n_bootstrap)
set.seed(123)
for (i in 1:n_bootstrap) {
vaccine_sample <- sample(c(0, 1), size = vaccine$COVID + vaccine$No_COVID, replace = TRUE, prob = c(1 - prop_vaccine, prop_vaccine))
placebo_sample <- sample(c(0, 1), size = placebo$COVID + placebo$No_COVID, replace = TRUE, prob = c(1 - prop_placebo, prop_placebo))
prop_vaccine_boot <- mean(vaccine_sample)
prop_placebo_boot <- mean(placebo_sample)
bootstrap_pi <- prop_vaccine_boot / (prop_vaccine_boot + prop_placebo_boot)
bootstrap_psis[i] <- (1 - 2 * bootstrap_pi) / (1 - bootstrap_pi)
}
